# -*- coding: utf-8 -*-
"""
/***************************************************************************
 first
                                 A QGIS plugin
 Premier plugin test
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-03
        git sha              : $Format:%H$
        copyright            : (C) 2021 by jojo
        email                : test@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication , Qt
from qgis.PyQt.QtGui import QIcon, QTextCursor
from qgis.PyQt.QtWidgets import QAction
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .first_dialog import firstDialog
import os.path

#Import my own class
from .pathLayer import *
from .networkLayer import *

class first:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'first_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        #AJOUT
        self.dlg = firstDialog()

        #add help-document to the GUI
        dir = os.path.dirname(__file__)
        file = os.path.abspath(os.path.join(dir, '.', 'help.html'))
        if os.path.exists(file):
            with open(file) as helpf:
                help = helpf.read()
                self.dlg.textBrowser_help.insertHtml(help)
                self.dlg.textBrowser_help.moveCursor(QTextCursor.Start)

        #==================================================================================

        #AJOUT PERSO
        self.dlg.pushButtonExportLine.clicked.connect(self.load_element)
        self.dlg.pushButtonReloadLayers.clicked.connect(self.fill_comboBox)
        self.dlg.pushButtonMapMatching.clicked.connect(self.start_mapMatching)
        self.dlg.pushButtonReselectPath.clicked.connect(self.test)

        #change attributes elements when path layer comboBox is activated
        self.dlg.comboBoxPathLayer.activated.connect(self.fill_attribute_comboBox)

        #buggé à garder en mémoire
        #root = QgsProject.instance().layerTreeRoot()
        #root.visibilityChanged.connect(self.info)

        #==================================================================================


        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&first')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        """ ligne 82: mise à jour comboBox quand selection de layer
            def info(self,layerTreeNode):
        self.fill_comboBox()
        print("info" + layerTreeNode.name())"""

    def test(self):
        self.path_layer.print_layer()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('first', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/first/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'TEST'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        #AJOUT
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&first'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        self.fill_comboBox()

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

            

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop

    def start_mapMatching(self):

        layer1 = self.get_layer(self.dlg.comboBoxNetworkLayer.currentText())
        layer2 = self.get_layer(self.dlg.comboBoxPathLayer.currentText())

        if not self.check_layer_validity(layer1,layer2):
            return
        
        #init classes
        self.path_layer = PathLayer(layer2)
        self.network_layer = NetworkLayer(layer1)
        

        #extract the part we need from the network layer (buffer...)

        #correct the topological errors

        #match the point to the extracted 


        self.path_layer.print_layer()
        #add to the screen the new point layer
        QgsProject.instance().addMapLayer(self.path_layer.layer)


    def check_layer_validity(self,layer1,layer2):

        #We check the Distance Unit of the projection system: 0 = DistanceMeters, 6 = DistanceDegrees...
        if(layer1.crs().mapUnits()!=0):
            self.iface.messageBar().pushMessage('Error the Network layer doesn\'t use a cartesian projection system')
            return False
        if(layer2.crs().mapUnits()!=0):
            self.iface.messageBar().pushMessage('Error the Path ayer doesn\'t use a cartesian projection system')
            return False

        #We check if the two layers use the same projection system
        if(layer1.crs().authid() != layer2.crs().authid()):
            self.iface.messageBar().pushMessage('Error the two selected layers has different projection system')
            return False

        return True

    #Remplissage des comboBox
        
    def fill_comboBox(self):

        #get all layers in the current QGIS project
        layers = self.iface.mapCanvas().layers()

        #remplis les comboBox
        self.fill_layer_comboBox(layers, self.dlg.comboBoxNetworkLayer, 'LINESTRING')
        self.fill_layer_comboBox(layers, self.dlg.comboBoxPathLayer, 'POINT')

        self.fill_attribute_comboBox()

        
    def fill_layer_comboBox(self, layers, combobox, geom_type):
        #first clear the combobox
        combobox.clear()

        #populate the combobox
        for layer in layers:
            #ignore raster layer, because just vector layers have a wkbType
            if layer.type() == 0:
                if (QgsWkbTypes.flatType(layer.wkbType()) == QgsWkbTypes.Point and geom_type == 'POINT' or 
                    QgsWkbTypes.flatType(layer.wkbType()) == QgsWkbTypes.LineString and geom_type == 'LINESTRING'):

                    combobox.addItem(layer.name())


    def fill_attribute_comboBox(self):

        #clear the combobox
        self.dlg.comboBoxOID.clear()
        self.dlg.comboBoxSpeed.clear()

        #get the selected Path layer in the comboBox
        layer = self.get_layer(self.dlg.comboBoxPathLayer.currentText())

        #No layer activated
        if(layer==None):
            self.iface.messageBar().pushMessage('Error no layer charged in qgis')
            return

        for field in layer.fields():
            if (field.typeName()=="Integer" or 
                field.typeName()=="Integer64" or
                field.typeName()=="int8" or 
                field.typeName()=="integer"):
                    self.dlg.comboBoxOID.addItem(field.name())
            elif (field.typeName() == "Real" or
                  field.typeName()=="double"):
                    self.dlg.comboBoxSpeed.addItem(field.name())

    def get_layer(self, layername):

        layers = self.iface.mapCanvas().layers()

        for layer in layers:
            if layer.name() == layername:
                return layer
        return None

    #charge un exemple dans qgis: pour faciliter le developpement
    def load_element(self):

        QgsProject.instance().removeAllMapLayers()


        layer = self.iface.addVectorLayer("/Users/jordy/OneDrive/Documents/Cours/Stage Montreal/Import QGIS/trajetV4_reprojeté.shp", "", "ogr")
        if not layer:
            print("Layer failed to load!")
        layer.setName("De jolie points sur une map : V4")

        layer = self.iface.addVectorLayer("/Users/jordy/OneDrive/Documents/Cours/Stage Montreal/Import QGIS/Paris_reprojeté.shp", "", "ogr")
        if not layer:
            print("Layer failed to load!")
        layer.setName("Map de Paris")

        for layer in QgsProject.instance().mapLayers().values():
            if(layer.name() != "De jolie points sur une map : V4" and layer.name() != "Map de Paris"):
                print(type(layer))
                node = QgsProject.instance().layerTreeRoot().findLayer(layer)
                if node:
                    node.setItemVisibilityChecked(False)

        print(layer.sourceName())

        self.fill_comboBox()
